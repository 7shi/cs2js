// This source code is generated by cs2js.

var TokenType =
{
	None: 0,
	Space: 1,
	NewLine: 2,
	Any: 3,
	Operator: 4,
	Separator: 5,
	Int: 6,
	UInt: 7,
	Long: 8,
	ULong: 9,
	Float: 10,
	Double: 11,
	String: 12,
	Char: 13,
	Comment: 14,
	Comment1: 15,
	BeginBlock: 16,
	EndBlock: 17,
	Comma: 18
};

var Token = (function()
{
	function Token(name, t, line, column)
	{
		this.Text = name;
		this.Type = t;
		this.Line = line;
		this.Column = column;
	}

	Token.prototype.Align = function(tab)
	{
		if (this.Type != TokenType.Space)
			return this.Text;
		else
		{
			sw = "";
			var column = this.Column;
			for (var i = 0; i < this.Text.length; i++)
			{
				ch = this.Text[i];
				if (ch == "\t")
				{
					var len = tab - ((column - 1) % tab);
					for (var i = 0; i < len; i++)
						sw += " ";
					column = column + len;
				}
				else
				{
					sw += ch;
					column = column + 1;
				}
			}
			return sw;
		}
	};

	Token.prototype.CanOmit = function()
	{
		return this.Type == TokenType.Space ||
			this.Type == TokenType.NewLine ||
			this.Type == TokenType.Comment ||
			this.Type == TokenType.Comment1;
	};

	Token.prototype.ToString = function()
	{
		tw = "[" + this.Line + ", " + this.Column + "] " + this.Type + ": ";
		switch (this.Type)
		{
		case TokenType.Space:
			tw += this.Align(4).length;
			break;
		case TokenType.NewLine:
			tw += this.Text.
				replace(/\r/g, "\\r").
				replace(/\n/g, "\\n");
			break;
		default:
			tw += this.Text;
			break;
		}
		return tw + NL;
	};

	return Token;
})();
